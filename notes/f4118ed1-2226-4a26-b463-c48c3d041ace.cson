createdAt: "2020-01-29T20:25:43.320Z"
updatedAt: "2020-02-26T15:45:54.515Z"
type: "MARKDOWN_NOTE"
folder: "e6d3330423734e2f4fd6"
title: "IAM Security in AWS"
tags: [
  "aws"
  "iam"
  "security"
  ".aws"
]
content: '''
  # `IAM` Security in AWS
  
  ## Setting up `IAM`
  
  ### Settning up users for people
  
  - navigate to `IAM`
  - click `Users` on left hand panel
  - click `Add user` button
  - enter `User Name`
  - select `Access type`, one or both
  - leave `Autogenerated password` and `Require password reset` checked
  -  click `Next: Permissions`
  - it's good practice to assign policies to a group so that we can use that group to assign the same policies to several users, click `create group`
  - enter `Group name`
  - click `Create policy`
    - to allow access to one specific `s3` bucket:
      - click `Choose service` and select `s3`
      - under `Actions` select `All S3 actions`
      - under `Resources` select `specific`
      - next to `bucket` click `Add ARN to restrict access` (`ARN`: Amazon Resource Name)
      - add `Bucket name` in the dialog box that comes up
      - click `Any` under `job` or restrict it
      - click `Any` under `object` or restrict it
    - leave `Request conditions` as default
    - click `Review policy`
    - enter `Name`
    - click `Create policy`
  -  back to `Create Group` hit refresh and search for the policy just created
  -  select policy just created (you can add more policies now or later)
  -  click `Create group`
  -  click `Next: Tags`
  -  click `Next: Review`
  -  click `Create user`
  -  download credentials
  -  install `aws` credentials
      - in terminal run `aws configure`
      - based on the downloded credentials
        - enter `AWS Access Key ID`
        - enter `AWS Secret Access Key`
        - for `Default region name` get the information from you aws management console
        - for `Default output format` just hit `enter`
  
      - this process installed our credential into our aws hidden folder `.aws` which you can find under your user root file
        - you can list the files created by running `ls ~/.aws` in your terminal
        - it will show two files
          - config
          - redentials
        - use `cat ~/.aws/config` to see that the default region is stored there
        - with  `cat ~/.aws/credentials` you can check the saved creadentials under `[deafult]` profile, you can add more profiles to manage different projects, you'll select the appropriate profiles at runtime of your application
  
  ### Setting up `roles` for services
  - to create a `role` navigate to `IAM`
  - select on `Roles` in the left hand panel
  - click `Create role`
  - to allow a service running on an `EC2` to access our bucket
  - under `Choose a use case` select `EC2`
  - click `Next: Persmissions`
  - under `Filter Policies` search for and select the created `policy group`
  - click `Next: Tags`
  - click `Next: Review`
  - enter `Role name`
  - click `Create role`
  - 
  -  
  ### The `root` user
  - the email address you use to sign up for your account becomes your `root` level account and has full access and permissions to any and everything in your account
  - don't use `root` user credentials for everyday access
  
  ### Securing `root` account
  - use `MFA` Multi Factor Authentication
  
  You'd create several users for yourself, with different credentials, for example one for develpment, one for production.
  
  ## `IAM` (Identity & Access Management)
  `IAM` is an AWS service, that allows us to configure who can access our AWS account, services or applications running in our account.
  
  It's a global service, that is automatically available.
  
  ### `IAM User`
  - an `IAM` user is an entity you create that can represent a person or a service that interacts with services or applications running in the AWS account
  - a user consists of a:
      - user name
      - access credentials
  
  ### `IAM Group`
  - is a collection of users
  - can specify permissions for a collections
  - makes permission easier to manage
  
  ### `IAM Role`
  - an identity with permissions or a set of privileges
  - not associated with a specific `IAM user` or `IAM group`
  - roles can be attached to a user
  - user can assume a single role temporarily to perform a specific task
  
  ### `Policy`
  - is a way to define granular level permission
  - written in JSON
  - can be attached to:
    - users
    - groups
    - roles
  - AWS has predifined list of policies
  - you can add custom ones:
      - Navigate to IAM
      - Click `Policies` on left panel, than `Create Policy`
      - Next to `Service` click `Choose a service`
      - Type `S3` in the box, click `Enter`, select `S3` from list
      - Under `Actions` in the `Access Level` section
        - Click on `List`
        - Expand `Read` and select `GetObject`
      - Expand the `Resources` section
        - Ensure `Specific` is selected
        - Select the `Any` checkpoxed next to `bucket` and `object`
      - Click `Review Policy`
      - Enter `Name` for policy
      - Click `Create Policy`
  
  
  ## `EC2 Security Group`
  - NOT part of `IAM`, NOT an `IAM Security Group`
  - are assicated with an `EC2` instance
  - act an as a built-in firewall
  - 
'''
linesHighlighted: []
isStarred: false
isTrashed: false
